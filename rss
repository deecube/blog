<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Debdeep Dey's Blog !]]></title><description><![CDATA[Thoughts, stories and ideas.]]></description><link>http://localhost:2368/</link><generator>Ghost 0.8</generator><lastBuildDate>Wed, 27 Jul 2016 04:58:08 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Luggage Security alarm]]></title><description><![CDATA[<p>For my Electronics circuit and design lab project in my 4th sem, I had submitted the following project. The device here has quite limited functionality. The device is not a smart device or an IOT device as we were asked not to use any microcontrollers. We were required to make</p>]]></description><link>http://localhost:2368/luggage_security_alarm/</link><guid isPermaLink="false">ea355c04-f951-42f8-aa15-49a07a346320</guid><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Thu, 21 Jul 2016 03:16:00 GMT</pubDate><content:encoded><![CDATA[<p>For my Electronics circuit and design lab project in my 4th sem, I had submitted the following project. The device here has quite limited functionality. The device is not a smart device or an IOT device as we were asked not to use any microcontrollers. We were required to make a device using only basic electronic components. <br>
So here's the synopsis : <br>
<a href="https://drive.google.com/open?id=0Bz2N9wWE32YJb1VYTUtoWXdyQjA">Synopsis for the Luggage Security Alarm Project</a></p>]]></content:encoded></item><item><title><![CDATA[Generate SSH keys on linux]]></title><description><![CDATA[<p>My work often requires me to use git and github for version control. So when you first clone a repository to your local hdd , you are required to enter your github username and password everytime when you want to push stuff to that repo. This can be quite cumbersome for</p>]]></description><link>http://localhost:2368/generate_ssh_keys_on_linux/</link><guid isPermaLink="false">059e345c-9caf-4c6e-995b-51d57e581bfe</guid><category><![CDATA[Linux]]></category><category><![CDATA[Foss]]></category><category><![CDATA[Git]]></category><category><![CDATA[Github]]></category><category><![CDATA[Ssh]]></category><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Tue, 19 Jul 2016 17:00:00 GMT</pubDate><content:encoded><![CDATA[<p>My work often requires me to use git and github for version control. So when you first clone a repository to your local hdd , you are required to enter your github username and password everytime when you want to push stuff to that repo. This can be quite cumbersome for someone like me who prefers to push stuff quite often. (as the old adage goes,' It's better to be safe than sorry')<a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a>Then on your local machine fire up the terminal (press ctrl+alt+t).change to your home directory(cd ~) and type in the following command :</p>

<blockquote>
  <p>ssh-keygen -t rsa -C "your@email.here"</p>
</blockquote>

<p>This will generate the ssh keys in /home/user/.ssh/id<em>rsa.pubNow in github, go to settings  and click on 'SSH keys and GPG Keys'.Click on 'New SSH key' and paste the contents of the id</em>rsa.pub here. You are all set !</p>]]></content:encoded></item><item><title><![CDATA[Simple Python HTTP Server on Linux]]></title><description><![CDATA[<p><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a>Fortunately in linux, it's really simple to create a http server with Python if you don't want to mess around with apache or the likes. All it takes is a single line of code. Okay, let's cut to the chase. Here's how you do it :1.Change your pwd to</p>]]></description><link>http://localhost:2368/simple_python_http_server_on_linux/</link><guid isPermaLink="false">71042a47-195c-43db-a781-88821e57347b</guid><category><![CDATA[Linux]]></category><category><![CDATA[Ubuntu]]></category><category><![CDATA[Foss]]></category><category><![CDATA[Python]]></category><category><![CDATA[Server]]></category><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Tue, 19 Jul 2016 16:59:00 GMT</pubDate><content:encoded><![CDATA[<p><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a>Fortunately in linux, it's really simple to create a http server with Python if you don't want to mess around with apache or the likes. All it takes is a single line of code. Okay, let's cut to the chase. Here's how you do it :1.Change your pwd to the folder that you would like to share</p>

<blockquote>
  <p>cd /home/some_directory</p>
</blockquote>

<p>2.Once you have done that, type in the following:</p>

<blockquote>
  <p>sudo python -m SimpleHTTPServer 80</p>
</blockquote>

<p>This will create a http server at port 80 and you will get the following message :</p>

<blockquote>
  <p>Serving HTTP on 0.0.0.0 port 80 ...</p>
</blockquote>

<p>Now open a browser and type</p>

<blockquote>
  <p><a href="http://192.168.1.2:80">http://192.168.1.2:80</a></p>
</blockquote>

<p>assuming that your ip address is 192.168.1.2Press ctrl+c to stop the server</p>]]></content:encoded></item><item><title><![CDATA[What does sudo apt-get autoremove do ?]]></title><description><![CDATA[<h2 id="httpswwwbloggercombloggergblogid8725866215977257841"><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a></h2>

<blockquote>
  <p>sudo apt-get autoremove</p>
</blockquote>

<p>Whenever you install an application (using <code>apt-get</code>) the system will also install the software that this application depends on. It is common in Ubuntu/Linux that applications share the same libraries. When you remove the appplication the dependency will stay on your system. <br>
So <code>apt-get autoremove</code> will</p>]]></description><link>http://localhost:2368/what_does_sudo_apt_get_autoremove_do/</link><guid isPermaLink="false">8519ad79-c36e-4f6c-9bb9-5e47cecbd5d4</guid><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Tue, 19 Jul 2016 16:58:00 GMT</pubDate><content:encoded><![CDATA[<h2 id="httpswwwbloggercombloggergblogid8725866215977257841"><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a></h2>

<blockquote>
  <p>sudo apt-get autoremove</p>
</blockquote>

<p>Whenever you install an application (using <code>apt-get</code>) the system will also install the software that this application depends on. It is common in Ubuntu/Linux that applications share the same libraries. When you remove the appplication the dependency will stay on your system. <br>
So <code>apt-get autoremove</code> will remove those dependencies that were installed with applications and that are no longer used by anything else on the system.</p>]]></content:encoded></item><item><title><![CDATA[Useful linux commands]]></title><description><![CDATA[<p><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a></p>

<ul>
<li><tt><strong>chmod</strong></tt> is the command and system call which may change the access permissions to file system objects (files and directories). It may also alter special mode flags. The request is filtered by the umask. The name is an abbreviation of <em>change mode</em>.</li>
<li><em>*ls *</em>is used to list files</li>
<li><em>*ps a</em></li></ul>]]></description><link>http://localhost:2368/useful_linux_commands/</link><guid isPermaLink="false">427eb3b6-4f08-4683-8e50-b06ec2826a54</guid><category><![CDATA[Linux]]></category><category><![CDATA[Ubuntu]]></category><category><![CDATA[Command Line]]></category><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Tue, 19 Jul 2016 16:57:00 GMT</pubDate><content:encoded><![CDATA[<p><a href="https://www.blogger.com/blogger.g?blogID=8725866215977257841"></a></p>

<ul>
<li><tt><strong>chmod</strong></tt> is the command and system call which may change the access permissions to file system objects (files and directories). It may also alter special mode flags. The request is filtered by the umask. The name is an abbreviation of <em>change mode</em>.</li>
<li><em>*ls *</em>is used to list files</li>
<li><em>*ps a *</em>is used to list the processes running</li>
<li><em>*shutdown now *</em>is used to shutdown the system</li>
<li><em>*sudo service lightdm  restart *</em>used to log out from the current user</li>
<li><strong>sudo add-apt-repository ppa:<ppa_name></ppa_name></strong></li>
</ul>]]></content:encoded></item><item><title><![CDATA[How to install .run files ?]]></title><description><![CDATA[<p>Occasionally, some applications and games (eg. some from the Humble Indie Bundle) have .run installers. Before installing using these, check to see if: <br>
1.it is available from the Software Centre <br>
2.it is available as a .deb file, which will open in the Software Center <br>
You can install .run</p>]]></description><link>http://localhost:2368/how_to_install_run_files/</link><guid isPermaLink="false">e23ab0a5-169d-456f-86cd-b1604b7231ea</guid><category><![CDATA[Linux]]></category><category><![CDATA[Ubuntu]]></category><category><![CDATA[Command Line]]></category><dc:creator><![CDATA[Debdeep Dey]]></dc:creator><pubDate>Tue, 19 Jul 2016 16:53:00 GMT</pubDate><content:encoded><![CDATA[<p>Occasionally, some applications and games (eg. some from the Humble Indie Bundle) have .run installers. Before installing using these, check to see if: <br>
1.it is available from the Software Centre <br>
2.it is available as a .deb file, which will open in the Software Center <br>
You can install .run files from the graphical interface, but using a terminal is more likely to give you useful feedback. To install a .run file you need to: <br>
make it executable. <br>
execute it <br>
This is because .run files are just executable programs that do some unknown magic to install the program. This is similar to what .exe installers do on Windows and is different to the normal methods (at best, using the Software Centre, at worst using .deb files) in which applications are installed in a standard way and can be easily removed. <br>
Graphical Method <br>
Right click on the file in the file manager and click 'Properties'. Click the 'Permissions' tab and tick the box that says 'Allow executing file as program'. <br>
Double click the file to execute it. <br>
If this method doesn't work, try using the terminal method. <br>
Terminal Method <br>
Assume the file is called some-app.run and is in the folder /home/user/Downloads. You will need to modify these instructions to fit your situation. <br>
Open a terminal (Applications->Accessories->Terminal). <br>
enter cd /home/user/Downloads <br>
enter chmod +x some-app.run <br>
enter ./some-app.run <br>
if step 4 fails with a message including 'permission denied', try entering sudo ./some-app.run (you will need to enter your password for this). <br>
Notes</p>

<p>Sometimes you will come across .bin files. These are basically the same as .run files. <br>
The method to install .run files can be used to execute any file (as long as it has some sort of executable code in it. <br>
Be careful using sudo and only use it when absolutely required. Translated into English, it means 'Run this command but allow it to do anything it wants to my computer'. This is why you are prompted for your password.</p>]]></content:encoded></item></channel></rss>